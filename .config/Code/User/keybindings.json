[
  // -- Unbind: Gitlens nonsense binds
  {
    "key": "ctrl+shift+g h",
    "command": "-gitlens.showQuickFileHistory",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "alt+c",
    "command": "-gitlens.showQuickCommitFileDetails",
    "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'alternate'"
  },
  {
    "key": "ctrl+shift+g c",
    "command": "-gitlens.showQuickCommitFileDetails",
    "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+shift+g ,",
    "command": "-gitlens.diffWithPrevious",
    "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "ctrl+shift+g .",
    "command": "-gitlens.diffWithNext",
    "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "alt+/",
    "command": "-gitlens.gitCommands",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
  },
  {
    "key": "ctrl+shift+g /",
    "command": "-gitlens.gitCommands",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "alt+.",
    "command": "-gitlens.diffWithNext",
    "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "alt+.",
    "command": "-gitlens.diffWithNextInDiffLeft",
    "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "ctrl+shift+g .",
    "command": "-gitlens.diffWithNextInDiffLeft",
    "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "alt+.",
    "command": "-gitlens.diffWithNextInDiffRight",
    "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "ctrl+shift+g .",
    "command": "-gitlens.diffWithNextInDiffRight",
    "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "alt+,",
    "command": "-gitlens.diffWithPrevious",
    "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "alt+,",
    "command": "-gitlens.diffWithPreviousInDiffLeft",
    "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "ctrl+shift+g ,",
    "command": "-gitlens.diffWithPreviousInDiffLeft",
    "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "alt+,",
    "command": "-gitlens.diffWithPreviousInDiffRight",
    "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "ctrl+shift+g ,",
    "command": "-gitlens.diffWithPreviousInDiffRight",
    "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "shift+alt+[IntlBackslash]",
    "command": "-gitlens.diffWithWorking",
    "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "shift+alt+.",
    "command": "-gitlens.diffWithWorking",
    "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "ctrl+shift+g shift+[IntlBackslash]",
    "command": "-gitlens.diffWithWorking",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "ctrl+shift+g shift+.",
    "command": "-gitlens.diffWithWorking",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "alt+[IntlBackslash]",
    "command": "-gitlens.diffLineWithPrevious",
    "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "shift+alt+,",
    "command": "-gitlens.diffLineWithPrevious",
    "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "ctrl+shift+g [IntlBackslash]",
    "command": "-gitlens.diffLineWithPrevious",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "ctrl+shift+g shift+,",
    "command": "-gitlens.diffLineWithPrevious",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "shift+alt+h",
    "command": "-gitlens.showQuickRepoHistory",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
  },
  {
    "key": "ctrl+shift+g shift+h",
    "command": "-gitlens.showQuickRepoHistory",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "alt+h",
    "command": "-gitlens.showQuickFileHistory",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
  },
  {
    "key": "alt+s",
    "command": "-gitlens.showQuickRepoStatus",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
  },
  {
    "key": "ctrl+shift+g s",
    "command": "-gitlens.showQuickRepoStatus",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "alt+b",
    "command": "-gitlens.toggleFileBlame",
    "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /blameable/"
  },
  {
    "key": "ctrl+shift+g b",
    "command": "-gitlens.toggleFileBlame",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/"
  },
  {
    "key": "shift+alt+b",
    "command": "-gitlens.toggleCodeLens",
    "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'alternate'"
  },
  {
    "key": "ctrl+shift+g shift+b",
    "command": "-gitlens.toggleCodeLens",
    "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'chorded'"
  },
  // -- Unbind: Workbench 
  {
    "key": "ctrl+shift+o",
    "command": "-workbench.action.gotoSymbol"
  },
  {
    "key": "ctrl+s",
    "command": "-workbench.action.files.save"
  },
  {
    "key": "ctrl+tab",
    "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
    "when": "!activeEditorGroupEmpty"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "-workbench.action.quickOpenLeastRecentlyUsedEditorInGroup",
    "when": "!activeEditorGroupEmpty"
  },
  {
    "key": "ctrl+k ctrl+pagedown",
    "command": "-workbench.action.nextEditorInGroup"
  },
  {
    "key": "ctrl+k ctrl+pageup",
    "command": "-workbench.action.previousEditorInGroup"
  },
  {
    "key": "ctrl+shift+2",
    "command": "-workbench.action.terminal.sendSequence",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+2",
    "command": "-workbench.action.focusSecondEditorGroup"
  },
  {
    "key": "ctrl+1",
    "command": "-workbench.action.focusFirstEditorGroup"
  },
  {
    "key": "ctrl+3",
    "command": "-workbench.action.focusThirdEditorGroup"
  },
  {
    "key": "ctrl+4",
    "command": "-workbench.action.focusFourthEditorGroup"
  },
  {
    "key": "ctrl+5",
    "command": "-workbench.action.focusFifthEditorGroup"
  },
  {
    "key": "ctrl+shift+5",
    "command": "-workbench.action.terminal.splitInstance",
    "when": "terminalProcessSupported && terminalTabsFocus"
  },
  {
    "key": "ctrl+6",
    "command": "-workbench.action.focusSixthEditorGroup"
  },
  {
    "key": "ctrl+7",
    "command": "-workbench.action.focusSeventhEditorGroup"
  },
  {
    "key": "ctrl+8",
    "command": "-workbench.action.focusEighthEditorGroup"
  },
  {
    "key": "ctrl+9",
    "command": "-workbench.action.lastEditorInGroup"
  },
  {
    "key": "alt+down",
    "command": "-workbench.action.terminal.focusNextPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+shift+w",
    "command": "-workbench.action.closeWindow"
  },
  {
    "key": "ctrl+j",
    "command": "-workbench.action.togglePanel"
  },
  {
    "key": "ctrl+shift+m",
    "command": "-workbench.actions.view.problems",
    "when": "workbench.panel.markers.view.active"
  },
  {
    "key": "ctrl+shift+c",
    "command": "-workbench.action.terminal.openNativeConsole",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "-workbench.action.splitEditorOrthogonal"
  },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "-workbench.action.splitEditorRight"
  },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "-workbench.action.splitEditorUp"
  },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "-workbench.action.splitEditorDown"
  },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "-workbench.action.splitEditorLeft"
  },
  {
    "key": "ctrl+k ctrl+right",
    "command": "-workbench.action.focusRightGroup"
  },
  {
    "key": "ctrl+k right",
    "command": "-workbench.action.moveActiveEditorGroupRight"
  },
  {
    "key": "ctrl+shift+pagedown",
    "command": "-workbench.action.moveEditorRightInGroup"
  },
  {
    "key": "ctrl+k ctrl+left",
    "command": "-workbench.action.focusLeftGroup"
  },
  {
    "key": "ctrl+k left",
    "command": "-workbench.action.moveActiveEditorGroupLeft"
  },
  {
    "key": "ctrl+shift+pageup",
    "command": "-workbench.action.moveEditorLeftInGroup"
  },
  {
    "key": "ctrl+k up",
    "command": "-workbench.action.moveActiveEditorGroupUp"
  },
  {
    "key": "ctrl+k ctrl+up",
    "command": "-workbench.action.focusAboveGroup"
  },
  {
    "key": "ctrl+k ctrl+down",
    "command": "-workbench.action.focusBelowGroup"
  },
  {
    "key": "ctrl+k e",
    "command": "-workbench.files.action.focusOpenEditorsView",
    "when": "workbench.explorer.openEditorsView.active"
  },
  {
    "key": "ctrl+shift+j",
    "command": "-workbench.action.search.toggleQueryDetails",
    "when": "inSearchEditor || searchViewletFocus"
  },
  {
    "key": "ctrl+k ctrl+shift+\\",
    "command": "-workbench.action.splitEditorInGroup",
    "when": "activeEditorCanSplitInGroup"
  },
  {
    "key": "ctrl+shift+g",
    "command": "-workbench.view.scm",
    "when": "workbench.scm.active"
  },
  {
    "key": "alt+1",
    "command": "-workbench.action.openEditorAtIndex1"
  },
  {
    "key": "shift+alt+1",
    "command": "-workbench.action.moveEditorToFirstGroup"
  },
  {
    "key": "alt+2",
    "command": "-workbench.action.openEditorAtIndex2"
  },
  {
    "key": "alt+3",
    "command": "-workbench.action.openEditorAtIndex3"
  },
  {
    "key": "alt+4",
    "command": "-workbench.action.openEditorAtIndex4"
  },
  {
    "key": "ctrl+shift+g g",
    "command": "-workbench.view.scm",
    "when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+b",
    "command": "-workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "ctrl+r",
    "command": "-workbench.action.reloadWindow",
    "when": "isDevelopment"
  },
  {
    "key": "ctrl+r",
    "command": "-workbench.action.openRecent"
  },
  {
    "key": "ctrl+e",
    "command": "-workbench.action.quickOpen"
  },
  {
    "key": "ctrl+o",
    "command": "-workbench.action.files.openFile",
    "when": "true"
  },
  {
    "key": "ctrl+o",
    "command": "-workbench.action.files.openFolderViaWorkspace",
    "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'"
  },
  {
    "key": "ctrl+o",
    "command": "-workbench.action.files.openFileFolder",
    "when": "isMacNative && openFolderWorkspaceSupport"
  },
  {
    "key": "ctrl+o",
    "command": "-workbench.action.files.openLocalFile",
    "when": "remoteFileDialogVisible"
  },
  {
    "key": "ctrl+shift+s",
    "command": "-workbench.action.files.saveAs"
  },
  {
    "key": "ctrl+k ctrl+shift+s",
    "command": "-workbench.action.files.saveWithoutFormatting"
  },
  {
    "key": "ctrl+shift+s",
    "command": "-workbench.action.files.saveLocalFile",
    "when": "remoteFileDialogVisible"
  },
  {
    "key": "ctrl+shift+b",
    "command": "-workbench.action.tasks.build",
    "when": "taskCommandsRegistered"
  },
  // -- Unbind others
  {
    "key": "ctrl+w",
    "command": "-workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+l",
    "command": "-expandLineSelection",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+l",
    "command": "-notebook.centerActiveCell",
    "when": "notebookEditorFocused"
  },
  {
    "key": "f4",
    "command": "-search.action.focusNextSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "shift+f4",
    "command": "-search.action.focusPreviousSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "shift+f4",
    "command": "-references-view.prev",
    "when": "reference-list.hasResult && references-view.canNavigate"
  },
  {
    "key": "f4",
    "command": "-references-view.next",
    "when": "reference-list.hasResult && references-view.canNavigate"
  },
  {
    "key": "f4",
    "command": "-goToNextReference",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    "key": "shift+f4",
    "command": "-goToPreviousReference",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    "key": "ctrl+d",
    "command": "-editor.action.addSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+i",
    "command": "-editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+i",
    "command": "-editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+i",
    "command": "-focusSuggestion",
    "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+i",
    "command": "-toggleSuggestionDetails",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+i",
    "command": "-toggleSuggestionDetails",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+[",
    "command": "-editor.action.outdentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+]",
    "command": "-editor.action.indentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+p",
    "command": "-keybindings.editor.toggleSortByPrecedence",
    "when": "inKeybindings"
  },
  {
    "key": "alt+p",
    "command": "-togglePreserveCase",
    "when": "editorFocus"
  },
  {
    "key": "alt+p",
    "command": "-toggleSearchPreserveCase",
    "when": "searchViewletFocus"
  },
  {
    "key": "shift+alt+p",
    "command": "-openapi.preview",
    "when": "editorTextFocus && !openapiErrors"
  },
  {
    "key": "ctrl+d",
    "command": "-list.focusPageDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+i",
    "command": "-interactiveEditor.start",
    "when": "interactiveEditorHasProvider && !editorReadonly"
  },
  {
    "key": "ctrl+k ctrl+l",
    "command": "-editor.toggleFold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+j",
    "command": "-editor.unfoldAll",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+k",
    "command": "-editor.action.selectFromAnchorToCursor",
    "when": "editorTextFocus && selectionAnchorSet"
  },
  {
    "key": "ctrl+k ctrl+k",
    "command": "-editor.action.defineKeybinding",
    "when": "editorTextFocus && !editorReadonly && editorLangId == 'jsonc' && resource == 'vscode-userdata:/c%3A/Users/CoredusK/AppData/Roaming/Code/User/keybindings.json'"
  },
  {
    "key": "ctrl+k ctrl+k",
    "command": "-editor.action.defineKeybinding",
    "when": "resource == 'vscode-userdata:/c%3A/Users/CoredusK/AppData/Roaming/Code/User/keybindings.json'"
  },
  {
    "key": "ctrl+alt+j",
    "command": "-liveshare.join",
    "when": "liveshare:state != 'Joined' && liveshare:state != 'Shared'"
  },
  {
    "key": "ctrl+alt+j",
    "command": "-bookmarks.jumpToPrevious",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+l",
    "command": "-selectAllSearchEditorMatches",
    "when": "inSearchEditor"
  },
  {
    "key": "ctrl+shift+l",
    "command": "-editor.action.selectHighlights",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+shift+l",
    "command": "-addCursorsAtSearchResults",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+shift+[IntlBackslash]",
    "command": "-breadcrumbs.toggleToOn",
    "when": "!config.breadcrumbs.enabled"
  },
  {
    "key": "ctrl+shift+[IntlBackslash]",
    "command": "-editor.action.inPlaceReplace.down",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+[IntlBackslash]",
    "command": "-breadcrumbs.focusAndSelect",
    "when": "breadcrumbsPossible && breadcrumbsVisible"
  },
  {
    "key": "h",
    "command": "-list.collapse",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "shift+alt+d",
    "command": "-abracadabra.moveStatementDown",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+h",
    "command": "-editor.action.startFindReplaceAction",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "key": "ctrl+v",
    "command": "-editor.action.clipboardPasteAction"
  },
  {
    "key": "ctrl+shift+a",
    "command": "-notification.acceptPrimaryAction",
    "when": "notificationToastsVisible"
  },
  {
    "key": "ctrl+shift+a",
    "command": "-editor.action.blockComment",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+v",
    "command": "-markdown.showPreview",
    "when": "!notebookEditorFocused && editorLangId == 'markdown'"
  },
  {
    "key": "ctrl+k v",
    "command": "-markdown.showPreviewToSide",
    "when": "!notebookEditorFocused && editorLangId == 'markdown'"
  },
  {
    "key": "shift+alt+u",
    "command": "-abracadabra.moveStatementUp",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+alt+k",
    "command": "-bookmarks.toggle",
    "when": "editorTextFocus"
  },
  // -- Neovim
  // Composite escape
  {
    "command": "vscode-neovim.compositeEscape1",
    "key": "j",
    "when": "neovim.mode == insert && editorTextFocus",
    "args": "j"
  },
  {
    "command": "vscode-neovim.compositeEscape2",
    "key": "k",
    "when": "neovim.mode == insert && editorTextFocus",
    "args": "k"
  },
  // VSCode comment on Visual Mode selection
  {
    "key": "ctrl+/",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'",
    "args": "<C-/>"
  },
  // Escape hatch for derping paste behavior
  {
    "key": "ctrl+shift+v",
    "command": "editor.action.clipboardPasteAction"
  },
  // Keep VSCode's ctrl+a to select all
  {
    "key": "ctrl+a",
    "command": "-vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
  },
  {
    "key": "ctrl+a",
    "command": "-vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysInsert && neovim.mode == 'insert'"
  },
  // Save and escape insert mode
  {
    "key": "ctrl+s",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.files.save",
        "vscode-neovim.escape"
      ]
    }
  },
  // nvim-esque window management
  {
    "key": "ctrl+w ctrl+h",
    "command": "workbench.action.focusLeftGroup"
  },
  {
    "key": "ctrl+w ctrl+l",
    "command": "workbench.action.focusRightGroup"
  },
  {
    "key": "ctrl+w ctrl+j",
    "command": "workbench.action.focusBelowGroup"
  },
  {
    "key": "ctrl+w ctrl+k",
    "command": "workbench.action.focusAboveGroup"
  },
  {
    "key": "ctrl+w ctrl+c",
    "command": "workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+w ctrl+d",
    "command": "workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+w d",
    "command": "workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+w c",
    "command": "workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+w ctrl+u",
    "command": "workbench.action.joinAllGroups"
  },
  {
    "key": "ctrl+w ctrl+s",
    "command": "workbench.action.splitEditorDown"
  },
  {
    "key": "ctrl+w ctrl+v",
    "command": "workbench.action.splitEditorRight"
  },
  {
    "key": "j",
    "command": "editor.action.scrollDownHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "h",
    "command": "editor.action.scrollLeftHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "l",
    "command": "editor.action.scrollRightHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "k",
    "command": "editor.action.scrollUpHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "h",
    "command": "editor.action.showHover",
    "when": "editorHoverVisible",
  },
  {
    "key": "ctrl+d",
    "command": "editor.action.pageDownHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "ctrl+u",
    "command": "editor.action.pageUpHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "ctrl+h",
    "command": "list.collapseAll",
    "when": "listFocus && !inputFocus"
  },
  // Vimify list & terminal handling
  {
    "key": "l",
    "command": "list.expand",
    "when": "listFocus && treeElementCanExpand && !inputFocus || listFocus && treeElementHasChild && !inputFocus"
  },
  {
    "key": "h",
    "command": "list.collapse",
    "when": "listFocus && treeElementCanCollapse && !inputFocus || listFocus && treeElementHasParent && !inputFocus"
  },
  {
    "key": "ctrl+alt+l",
    "command": "workbench.action.terminal.split",
    "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
  },
  {
    "key": "ctrl+h",
    "command": "workbench.action.terminal.focusPreviousPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.terminal.focusNextPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+alt+h",
    "command": "workbench.action.terminal.split",
    "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
  },
  {
    "key": "ctrl+d",
    "command": "workbench.action.terminal.scrollDownPage",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "key": "ctrl+u",
    "command": "workbench.action.terminal.scrollUpPage",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "key": "ctrl+shift+j",
    "command": "workbench.action.terminal.scrollDown",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "key": "ctrl+shift+k",
    "command": "workbench.action.terminal.scrollUp",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
  },
  // -- Harpoon
  {
    "key": "shift+alt+p",
    "command": "vscode-harpoon.editEditors"
  },
  {
    "key": "alt+p",
    "command": "vscode-harpoon.editorQuickPick"
  },
  {
    "key": "alt+1",
    "command": "vscode-harpoon.gotoEditor1"
  },
  {
    "key": "alt+2",
    "command": "vscode-harpoon.gotoEditor2"
  },
  {
    "key": "alt+3",
    "command": "vscode-harpoon.gotoEditor3"
  },
  {
    "key": "shift+alt+1",
    "command": "vscode-harpoon.addEditor1"
  },
  {
    "key": "shift+alt+2",
    "command": "vscode-harpoon.addEditor2"
  },
  {
    "key": "shift+alt+3",
    "command": "vscode-harpoon.addEditor3"
  },
  {
    "key": "shift+alt+4",
    "command": "vscode-harpoon.addEditor4"
  },
  {
    "key": "alt+4",
    "command": "vscode-harpoon.gotoEditor4"
  },
  // -- Bookmarks
  {
    "key": "ctrl+alt+b",
    "command": "bookmarks.toggleLabeled"
  },
  {
    "key": "ctrl+shift+alt+b",
    "command": "bookmarks.toggle"
  },
  // -- Sidebar toggles
  {
    "key": "ctrl+shift+g",
    "command": "workbench.view.scm",
    "when": "workbench.scm.active"
  },
  {
    "key": "ctrl+shift+b",
    "command": "bookmarksExplorer.focus"
  },
  {
    "key": "ctrl+shift+o",
    "command": "outline.focus"
  },
  {
    "key": "ctrl+shift+a",
    "command": "atlascode.views.bb.pullrequestsTreeView.focus"
  },
  {
    "key": "ctrl+shift+alt+a",
    "command": "workbench.action.closeSidebar"
  },
  {
    "key": "ctrl+shift+alt+o",
    "command": "workbench.action.closeAuxiliaryBar"
  },
  {
    "key": "ctrl+shift+alt+f",
    "command": "workbench.action.closeAuxiliaryBar"
  },
  {
    "key": "ctrl+shift+alt+e",
    "command": "workbench.action.closeSidebar"
  },
  {
    "key": "ctrl+shift+alt+g",
    "command": "workbench.action.closeSidebar"
  },
  {
    "key": "ctrl+shift+alt+x",
    "command": "workbench.action.closeSidebar"
  },
  // -- Terminal panel
  {
    "key": "ctrl+j",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+alt+j",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  {
    "key": "ctrl+alt+`",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  // -- Git workflow
  {
    "key": "ctrl+g ctrl+m",
    "command": "extension.showGitmoji"
  },
  {
    "key": "ctrl+g ctrl+g",
    "command": "extension.showGitmoji"
  },
  {
    "key": "shift+f7",
    "command": "-editor.action.diffReview.prev",
    "when": "isInDiffEditor"
  },
  {
    "key": "f7",
    "command": "-editor.action.diffReview.next",
    "when": "isInDiffEditor"
  },
  {
    "key": "l",
    "command": "editor.action.diffReview.next",
    "when": "isInDiffEditor"
  },
  {
    "key": "h",
    "command": "editor.action.diffReview.prev",
    "when": "isInDiffEditor"
  },
  {
    // d for Diff
    "key": "ctrl+g ctrl+d",
    "command": "git.openChange"
  },
  {
    "key": "ctrl+g ctrl+o",
    "command": "git.openAllChanges"
  },
  {
    "key": "ctrl+g ctrl+-",
    "command": "git.unstage"
  },
  {
    "key": "ctrl+g ctrl+=",
    "command": "git.stage"
  },
  {
    "key": "ctrl+g ctrl+u",
    "command": "git.unstageAll"
  },
  {
    "key": "ctrl+g ctrl+a",
    "command": "git.stageAll"
  },
  {
    "key": "ctrl+k ctrl+n",
    "command": "-git.unstageSelectedRanges",
    "when": "isInDiffEditor && !operationInProgress"
  },
  {
    "key": "alt+f3",
    "command": "-editor.action.dirtydiff.next",
    "when": "editorTextFocus && !textCompareEditorActive"
  },
  {
    "key": "shift+alt+f3",
    "command": "-editor.action.dirtydiff.previous",
    "when": "editorTextFocus && !textCompareEditorActive"
  },
  // -- Editor
  {
    "key": "meta+n",
    "command": "explorer.newFile"
  },
  {
    "key": "ctrl+tab",
    "command": "workbench.action.nextEditorInGroup"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.previousEditorInGroup"
  },
  {
    "key": "ctrl+shift+m",
    "command": "markdown.showPreview",
    "when": "!notebookEditorFocused && editorLangId == 'markdown'"
  },
  {
    "key": "ctrl+shift+c",
    "command": "workbench.action.toggleCommenting",
    "when": "editorfocus"
  },
  // Atlassian thing
  {
    "key": "ctrl+shift+/",
    "command": "editor.action.blockComment",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "f4",
    "command": "workbench.action.closeActiveEditor"
  }
]